// ignore_for_file: non_constant_identifier_names, camel_case_types, missing_return, unused_import, unused_local_variable
//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

import 'dart:typed_data';

import 'package:amap_core_fluttify/src/ios/ios.export.g.dart';
import 'package:amap_core_fluttify/src/android/android.export.g.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';

class AMapURLSearch extends NSObject  {
  //region constants
  
  //endregion

  //region creators
  static Future<AMapURLSearch> create__() async {
    final int refId = await MethodChannel('me.yohom/amap_core_fluttify').invokeMethod('ObjectFactory::createAMapURLSearch');
    final object = AMapURLSearch()..refId = refId..tag = 'amap_core_fluttify';
  
    kNativeObjectPool.add(object);
    return object;
  }
  
  //endregion

  //region getters
  
  //endregion

  //region setters
  
  //endregion

  //region methods
  static Future<void> getLatestAMapApp() async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: AMapURLSearch::getLatestAMapApp([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_core_fluttify').invokeMethod('AMapURLSearch::getLatestAMapApp', );
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<bool> openAMapNavigation(AMapNaviConfig config) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: AMapURLSearch::openAMapNavigation([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_core_fluttify').invokeMethod('AMapURLSearch::openAMapNavigation', {"config": config.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<bool> openAMapRouteSearch(AMapRouteConfig config) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: AMapURLSearch::openAMapRouteSearch([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_core_fluttify').invokeMethod('AMapURLSearch::openAMapRouteSearch', {"config": config.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  static Future<bool> openAMapPOISearch(AMapPOIConfig config) async {
    // print log
    if (fluttifyLogEnabled) {
      print('fluttify-dart: AMapURLSearch::openAMapPOISearch([])');
    }
  
    // invoke native method
    final result = await MethodChannel('me.yohom/amap_core_fluttify').invokeMethod('AMapURLSearch::openAMapPOISearch', {"config": config.refId});
  
  
    // handle native call
  
  
    // convert native result to dart side object
    if (result == null) {
      return null;
    } else {
    
      return result;
    }
  }
  
  //endregion
}